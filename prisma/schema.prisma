generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma-client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeviceType {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        String        @unique @default("olt")
  DeviceModel DeviceModel[]
}

model DeviceVendor {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  DeviceModel DeviceModel[]
}

model DeviceModel {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String          @unique
  vendorId      Int
  deviceTypeId  Int
  deviceType    DeviceType      @relation(fields: [deviceTypeId], references: [id])
  vendor        DeviceVendor    @relation(fields: [vendorId], references: [id])
  NetworkDevice NetworkDevice[]
}

model DeviceCredential {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  username      String          @default("admin")
  password      String          @default("admin")
  NetworkDevice NetworkDevice[]
}

model NetworkDevice {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  accessIpAddressV4    String                 @unique
  accessType           String                 @default("telnet")
  accessPort           String                 @default("23")
  description          String                 @default("")
  deviceModelId        Int
  deviceCredentialId   Int
  deviceCredential     DeviceCredential       @relation(fields: [deviceCredentialId], references: [id])
  deviceModel          DeviceModel            @relation(fields: [deviceModelId], references: [id])
  StatInactiveOnu      StatInactiveOnu[]
  StatOnuDevice        StatOnuDevice[]
  StatOnuOpticalSignal StatOnuOpticalSignal[]
  enabled              Boolean                @default(true)
}

model StatOnuDevice {
  id              Int           @id @default(autoincrement())
  vendorId        String
  modelId         String
  macAddressOnu   String        @default("")
  serialNumberOnu String        @default("")
  description     String
  bindType        String
  status          String
  deregReason     String
  createdAt       DateTime      @default(now())
  networkDeviceId Int
  xponBoard       Int
  xponPort        Int
  xponInterface   Int
  xponType        String        @default("pon")
  networkDevice   NetworkDevice @relation(fields: [networkDeviceId], references: [id])

  @@index([macAddressOnu])
  @@index([serialNumberOnu])
  @@index([status])
}

model StatOnuOpticalSignal {
  id              Int           @id @default(autoincrement())
  xponBoard       Int
  xponPort        Int
  xponInterface   Int
  rxPower         Float
  txPower         Float
  createdAt       DateTime      @default(now())
  networkDeviceId Int
  networkDevice   NetworkDevice @relation(fields: [networkDeviceId], references: [id])
}

model StatInactiveOnu {
  id              Int           @id @default(autoincrement())
  xponBoard       Int
  xponPort        Int
  xponInterface   Int
  macAddressOnu   String
  serialNumberOnu String        @default("")
  status          String
  deregReason     String
  lastRegister    DateTime
  lastDeregister  DateTime
  createdAt       DateTime      @default(now())
  networkDeviceId Int
  newest          Boolean       @default(true)
  networkDevice   NetworkDevice @relation(fields: [networkDeviceId], references: [id])

  @@index([macAddressOnu])
  @@index([serialNumberOnu])
  @@index([status])
}
